{
    "/Users/omarsaldanna/watson-ai/main.py": "# import the main function\nfrom modules.ai import AI\n# library to detect keybaord\nfrom pynput import keyboard\n# others ...\nimport time\nimport sys\nimport os\n\n# variables to check the state of the keys\ncommand_pressed = False\noption_pressed = False\nlast_detection_time = 0\nCOOLDOWN_SECONDS = int(os.environ[\"COOLDOWN\"])\n\n# start the AI with the current file\nai = AI(sys.argv[1])\n\n# function when a key is pressed\ndef on_press(key):\n    # define global variables\n    global command_pressed, option_pressed, last_detection_time\n    # try to detect\n    try:\n        # get the current time\n        current_time = time.time()\n        # if keys are pressed\n        if key in [keyboard.Key.cmd_l, keyboard.Key.cmd_r]:\n            command_pressed = True\n        elif key in [keyboard.Key.alt_l, keyboard.Key.alt_r]:\n            option_pressed = True\n        # if both\n        if command_pressed and option_pressed:\n            # detect the cooldown\n            if current_time - last_detection_time >= COOLDOWN_SECONDS:\n                print(f\">>> Shortcut detected\")\n                # use AI then\n                ai()\n                # set the variable to new events\n                last_detection_time = current_time\n    # if there were an error just skip\n    except AttributeError:\n        pass\n\n\n# when a key is released\ndef on_release(key):\n    # global variables\n    global command_pressed, option_pressed\n    # just set the variables as false\n    if key in [keyboard.Key.cmd_l, keyboard.Key.cmd_r]:\n        command_pressed = False\n    elif key in [keyboard.Key.alt_l, keyboard.Key.alt_r]:\n        option_pressed = False\n\n\n# start the listener\nwith keyboard.Listener(on_press=on_press, on_release=on_release) as listener:\n    listener.join()",
    "/Users/omarsaldanna/watson-ai/global.conf": "# path to the project folder\nexport MAIN=\"/Users/omarsaldanna/watson-ai\"\n\n# cooldown seconds to receibe button actions\nexport COOLDOWN=2\n\n# temporary file extension\nexport TMP_EXT=\".tmp\"\n\n# indent size for the json files\nexport INDENT=4"
}